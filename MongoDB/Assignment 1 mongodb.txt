INSERT DOCUMENT
1.mongo

2.use mongo_practice

3.db.createCollection('movies')

4.db.movies.insertMany(
[
{
title : "Fight Club", 
writer : "Chuck Palahniuko", 
year : "1999", 
actors : [ "Brad Pitt", "Edward Norton" ] 
},
{
title : "Pulp Fiction", 
writer : "Quentin Tarantino", 
year : "1994", 
actors : ["John Travolta", "Uma Thurman"]
},
{
title : "Inglorious Basterds",
writer : "Quentin Tarantino", 
year : "2009", 
actors : ["Brad Pitt", "Diane Kruger", "Eli Roth"]
},
{
title : "The Hobbit: An Unexpected Journey", 
writer : "J.R.R. Tolkein", 
year : "2012", 
franchise : "The Hobbit"
},
{
title : "The Hobbit: The Desolation of Smaug",
writer : "J.R.R. Tolkein",
year : "2013", 
franchise : "The Hobbit" 
},
{
title : "The Hobbit: The Battle of the Five Armies", 
writer : "J.R.R. Tolkein", 
year : "2012", 
franchise : "The Hobbit", 
synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.",
},
{
title : "Pee Wee Herman's Big Adventure"
},
{
title : "Avatar"
}
])

QUERY OR FIND DOCUMENTS

1.db.movies.find().pretty()

2.db.movies.find({"writer":{ $eq : "Quentin Tarantino"}}).pretty()

3.db.movies.find({"actors":{ $eq : "Brad Pitt"}}).pretty()

4.db.movies.find({"frachise":{ $eq : "The Hobbit"}}).pretty()

5.db.movies.find({ $and : [ { "year" :{ $gte : "1990"}}, { "year" :{ $lte : "2000"}} ] } )

6. db.movies.find({ $or : [ { "year" :{ $gt : "2010"}}, { "year" :{ $lt : "2000"}} ] } )

UPDATE DOCUMENTS

1. db.movies.updateOne(
                      {title: 'The Hobbit: An Unexpected Journey'},
                      { $set : { synopsis : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their                             mountain home - and the gold within it - from the dragon Smaug."}})

2.db.movies.updateOne(
                      {title: 'The Hobbit: The Desolation of Smaug'},
                      { $set : { synopsis : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from                       Smaug. Bilbo Baggins is in possession of a mysterious and magical ring.}})

3.db.movies.updateOne({title: "Pulp Fiction"},{$push : {actors:"Samuel L Jackson"}})

TEXT SEARCH

creating text index
db.movies.createIndex({title:"text"})

1. db.movies.find({$text:{$search:"Bilbo"}}).pretty()

2.db.movies.find({$text:{$search:"Gandalf"}})

3.db.movies.find({$text:{$search:"dwarves hobbit"}})

4.db.movies.find({$text:{$search:"dwarves hobbit"}})

5.db.movies.find({$text:{$search:"gold dragon"}})

DELETE DOCUMENTS

1.db.movies.remove({Title:"Pee Wee Herman's Big Adventure"})

2.db.movies.remove({Title:"Avatar"})

RELATIONSHIPS

Creating users collection

db.createCollection('users')

1.db.users.insertOne({
                      username: "GoodGuyGreg",
                      first_name: "GoodGuy",
                      last_name: "Greg" })
2.db.users.insertOne({
                      username:"ScumbagSteve",
                      full_name:{
                                 fisrt_name:"Scumbag",
                                 last_name:"Steve"}})

Creating posts collections

db.createCollection('posts')
 1.db.posts.insertMany(
[
{
username : "GoodGuyGreg", 
title : "Passes out at party", 
body : "Wakes up early and cleans house"
},
{
username:"GoodGuyGreg", 
title:"Steals your identity", 
body:"Raises your credit score"
},
{
username:"GoodGuyGreg", 
title:"Reports a bug in your code", 
body:"Sends you a pull request"
},
{
username:"ScumbagSteve", 
title:"Borrows something", 
body:"Sells it"
},
{
username:"ScumbagSteve", 
title:"Borrows everything", 
body:"The end"
},
{
username:"ScumbagSteve", 
title:"Forks your repo on github", 
body:"Sets to private"
}
]
)

Creating comments collection

1.db.createCollection('comments')

db.comments.insertOne({username :"GoodGuyGreg", comment: "Hope you got a good deal", post :ObjectId("60052c483083af647c3aec85")})                   
db.comments.insertOne({username :"GoodGuyGreg", comment: "What's mine is yours!", post :ObjectId("60052c483083af647c3aec86")})

db.comments.insertOne({username :"GoodGuyGreg", comment: "Don't violate the licensing agreement!", post :ObjectId("60052c483083af647c3aec87")})

db.comments.insertOne({username :"ScumbagSteve", comment: "It still isn't clean!", post :ObjectId("60052c483083af647c3aec82")})

db.comments.insertOne({username :"ScumbagSteve", comment: "IDenied your PR cause i found a hack", post :ObjectId("60052c483083af647c3aec84")})

Querying related to collections

1.db.users.find().pretty()

2.db.posts.find().pretty()

3.db.posts.find({username : "GoodGuyGreg}).pretty()

4.db.posts.find({username:"ScumbagSteve"}).pretty()

5.db.comments.find().pretty()

6.db.comments.find({username:"GoodGuyGreg"}).pretty()

7.db.comments.find({username:"ScumbagSteve"}).pretty()
